/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1/recordings": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Recordings
     * @description List all recordings.
     */
    get: operations["list_recordings_api_v1_recordings_get"];
    put?: never;
    /**
     * Create Recording
     * @description Create a new manual recording.
     */
    post: operations["create_recording_api_v1_recordings_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/recordings/{recording_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Recording
     * @description Get a specific recording.
     */
    get: operations["get_recording_api_v1_recordings__recording_id__get"];
    /**
     * Update Recording
     * @description Update recording metadata.
     */
    put: operations["update_recording_api_v1_recordings__recording_id__put"];
    post?: never;
    /**
     * Delete Recording
     * @description Cancel and delete recording.
     */
    delete: operations["delete_recording_api_v1_recordings__recording_id__delete"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/recordings/{recording_id}/start": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Start Recording
     * @description Start recording.
     */
    post: operations["start_recording_api_v1_recordings__recording_id__start_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/recordings/{recording_id}/stop": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Stop Recording
     * @description Stop recording gracefully.
     */
    post: operations["stop_recording_api_v1_recordings__recording_id__stop_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/recordings/{recording_id}/audio": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Recording Audio
     * @description Download recording audio file.
     */
    get: operations["get_recording_audio_api_v1_recordings__recording_id__audio_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/recordings/{recording_id}/transcript": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Recording Transcript
     * @description Get recording transcript.
     */
    get: operations["get_recording_transcript_api_v1_recordings__recording_id__transcript_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/recordings/{recording_id}/summary": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Recording Summary
     * @description Get recording summary.
     */
    get: operations["get_recording_summary_api_v1_recordings__recording_id__summary_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/recordings/{recording_id}/postprocess": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Postprocess Recording
     * @description Add recording to postprocess queue.
     */
    post: operations["postprocess_recording_api_v1_recordings__recording_id__postprocess_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/recordings/{recording_id}/reprocess": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Reprocess Recording
     * @description Reprocess recording with new language settings.
     */
    post: operations["reprocess_recording_api_v1_recordings__recording_id__reprocess_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/profiles": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Profiles
     * @description List all profiles.
     */
    get: operations["list_profiles_api_v1_profiles_get"];
    put?: never;
    /**
     * Create Profile
     * @description Create a new profile.
     */
    post: operations["create_profile_api_v1_profiles_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/profiles/{profile_name}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Profile
     * @description Get a specific profile.
     */
    get: operations["get_profile_api_v1_profiles__profile_name__get"];
    /**
     * Update Profile
     * @description Update profile (rename).
     */
    put: operations["update_profile_api_v1_profiles__profile_name__put"];
    post?: never;
    /**
     * Delete Profile
     * @description Delete a profile.
     */
    delete: operations["delete_profile_api_v1_profiles__profile_name__delete"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/profiles/{profile_name}/launch": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Launch Profile
     * @description Launch browser with specific profile.
     */
    post: operations["launch_profile_api_v1_profiles__profile_name__launch_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/calendar/sync": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Sync Calendar
     * @description Trigger calendar synchronization.
     */
    post: operations["sync_calendar_api_v1_calendar_sync_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/settings/schema": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Settings Schema
     * @description Get JSON schema for settings.
     */
    get: operations["get_settings_schema_api_v1_settings_schema_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/settings": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Settings
     * @description Get current settings.
     */
    get: operations["get_settings_api_v1_settings_get"];
    /**
     * Update Settings
     * @description Update settings and save to file.
     */
    put: operations["update_settings_api_v1_settings_put"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/service/restart": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Restart Service
     * @description Send SIGINT to self for systemd restart.
     *
     *     This endpoint sends SIGINT signal to the current process,
     *     which will cause systemd to restart the service automatically.
     */
    post: operations["restart_service_api_v1_service_restart_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/service/status": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Service Status
     * @description Get basic service status information.
     */
    get: operations["service_status_api_v1_service_status_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/health": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Health Check
     * @description Health check endpoint.
     */
    get: operations["health_check_health_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * ActionItemSchema
     * @description Single actionable item to be tracked after the meeting.
     */
    ActionItemSchema: {
      /**
       * Owners
       * @description Responsible people as plain human names (no emails or usernames).
       */
      owners?: string[];
      /**
       * Task
       * @description Actionable task phrased as a verb phrase (e.g., 'Prepare Q3 sales forecast').
       */
      task: string;
      /**
       * Due
       * @description Optional due date in ISO-8601 date (YYYY-MM-DD) or RFC 3339 datetime. Null if not set.
       */
      due?: string | null;
      /**
       * Priority
       * @description Optional priority label. Allowed values: 'high', 'medium', 'low'.
       */
      priority?: string | null;
    };
    /** AppSettings */
    "AppSettings-Input": {
      /**
       * general
       * @description Basic application identity and display naming.
       */
      general?: components["schemas"]["GeneralSettings"];
      /**
       * models
       * @description Speech model selection and cache configuration.
       */
      models?: components["schemas"]["ModelsSettings"];
      /**
       * browser
       * @description Browser profiles configuration (user-data directories, default profile).
       */
      browser?: components["schemas"]["BrowserSettings"];
      /**
       * audio
       * @description Audio pipeline parameters and Opus encoder settings.
       */
      audio?: components["schemas"]["AudioSettings"];
      /**
       * http
       * @description HTTP server configuration (host and port for API and web interface).
       */
      http?: components["schemas"]["HttpSettings"];
      /**
       * paths
       * @description Filesystem paths for meetings, schedule, and state files.
       */
      paths?: components["schemas"]["PathsSettings"];
      /**
       * postprocess
       * @description Post-processing service options (concurrency).
       */
      postprocess?: components["schemas"]["PostprocessSettings"];
      /**
       * recording
       * @description Recording metrics and drain behaviour.
       */
      recording?: components["schemas"]["RecordingSettings"];
      /**
       * integrations
       * @description External integrations configuration (e.g., Outlook / Microsoft Graph).
       */
      integrations?: components["schemas"]["IntegrationsSettings"];
      /**
       * speaker
       * @description Speaker assignment algorithm parameters and debugging options.
       */
      speaker?: components["schemas"]["SpeakerAssignSettings"];
      /**
       * summarization
       * @description LLM-based summarization settings and limits.
       */
      summarization?: components["schemas"]["SummarizationSettings"];
      /**
       * export
       * @description Export settings for summaries and Obsidian.
       */
      export?: components["schemas"]["ExportSettings"];
    };
    /** AppSettings */
    "AppSettings-Output": {
      /**
       * general
       * @description Basic application identity and display naming.
       */
      general?: components["schemas"]["GeneralSettings"];
      /**
       * models
       * @description Speech model selection and cache configuration.
       */
      models?: components["schemas"]["ModelsSettings"];
      /**
       * browser
       * @description Browser profiles configuration (user-data directories, default profile).
       */
      browser?: components["schemas"]["BrowserSettings"];
      /**
       * audio
       * @description Audio pipeline parameters and Opus encoder settings.
       */
      audio?: components["schemas"]["AudioSettings"];
      /**
       * http
       * @description HTTP server configuration (host and port for API and web interface).
       */
      http?: components["schemas"]["HttpSettings"];
      /**
       * paths
       * @description Filesystem paths for meetings, schedule, and state files.
       */
      paths?: components["schemas"]["PathsSettings"];
      /**
       * postprocess
       * @description Post-processing service options (concurrency).
       */
      postprocess?: components["schemas"]["PostprocessSettings"];
      /**
       * recording
       * @description Recording metrics and drain behaviour.
       */
      recording?: components["schemas"]["RecordingSettings"];
      /**
       * integrations
       * @description External integrations configuration (e.g., Outlook / Microsoft Graph).
       */
      integrations?: components["schemas"]["IntegrationsSettings"];
      /**
       * speaker
       * @description Speaker assignment algorithm parameters and debugging options.
       */
      speaker?: components["schemas"]["SpeakerAssignSettings"];
      /**
       * summarization
       * @description LLM-based summarization settings and limits.
       */
      summarization?: components["schemas"]["SummarizationSettings"];
      /**
       * export
       * @description Export settings for summaries and Obsidian.
       */
      export?: components["schemas"]["ExportSettings"];
    };
    /** AudioSettings */
    AudioSettings: {
      /**
       * PCM sample rate (Hz)
       * @description Target PCM sampling rate used by the audio pipeline in Hertz.
       * @default 16000
       */
      pcm_sample_rate: number;
      /**
       * PCM channels
       * @description Number of audio channels for PCM data (1=mono, 2=stereo).
       * @default 1
       */
      pcm_channels: number;
      /**
       * PCM sample format
       * @description Sample format for PCM audio (e.g. 's16', 's32', 'f32').
       * @default s16
       */
      pcm_format: string;
      /**
       * PCM bytes per sample
       * @description Number of bytes per PCM sample; affects framing and buffer sizes.
       * @default 2
       */
      pcm_bytes_per_sample: number;
      /**
       * Frame size (ms)
       * @description Duration of a single audio frame used during processing and encoding, in milliseconds.
       * @default 10
       */
      frame_ms: number;
      /**
       * Opus encoder settings
       * @description Nested configuration for Opus-related encoding parameters.
       */
      opus?: components["schemas"]["OpusSettings"];
    };
    /** BrowserSettings */
    BrowserSettings: {
      /**
       * Browser binary
       * @description Which browser to use.
       * @default chromium-browser
       */
      browser_bin: string;
      /**
       * Browser visible
       * @description Whether to show the browser window. If False, the browser will be headless.
       * @default false
       */
      browser_visible: boolean;
      /**
       * Browser profiles base directory
       * @description Base directory for browser user-data profiles.
       * @default ~/.config/h3xassist/browser-profiles
       */
      profiles_base_dir: string;
      /**
       * Default browser profile name
       * @description Profile name used by default when a specific profile is not provided.
       * @default default
       */
      default_profile_name: string;
    };
    /** ContextSchema */
    ContextSchema: {
      /**
       * Goal
       * @description Meeting objective
       */
      goal?: string | null;
      /**
       * Status
       * @description Current status/facts relevant to the goal
       */
      status?: string | null;
    };
    /** CreateProfileRequest */
    CreateProfileRequest: {
      /**
       * Name
       * @description Profile name
       */
      name: string;
    };
    /** CreateRecordingRequest */
    CreateRecordingRequest: {
      /**
       * Subject
       * @description Meeting subject
       */
      subject: string;
      /**
       * Url
       * @description Meeting URL
       */
      url: string;
      /**
       * Scheduled Start
       * Format: date-time
       * @description Meeting scheduled start time
       */
      scheduled_start: string;
      /**
       * Scheduled End
       * Format: date-time
       * @description Meeting scheduled end time
       */
      scheduled_end: string;
      /**
       * Language
       * @description Meeting language
       */
      language?: string | null;
      /**
       * Profile
       * @description Browser profile
       * @default default
       */
      profile: string;
      /**
       * Use School Meet
       * @description Use school Google Meet mode
       * @default false
       */
      use_school_meet: boolean;
    };
    /** DecisionItemSchema */
    DecisionItemSchema: {
      /**
       * Description
       * @description Decision statement in past tense.
       */
      description: string;
      /**
       * Status
       * @description accepted/rejected or similar status label
       */
      status: string;
      /**
       * Owners
       * @description Responsible people (names only)
       */
      owners?: string[];
      /**
       * Effective From
       * @description YYYY-MM-DD when decision takes effect
       */
      effective_from?: string | null;
    };
    /** ExportSettings */
    ExportSettings: {
      /**
       * Obsidian enabled
       * @description Whether to export summaries to Obsidian.
       * @default true
       */
      obsidian_enabled: boolean;
      /**
       * Obsidian base directory
       * @description Directory where finalized summary markdown and JSON artifacts are stored.
       */
      obsidian_base_dir?: string | null;
    };
    /** FollowupItemSchema */
    FollowupItemSchema: {
      /**
       * Question
       * @description Open question that needs an answer
       */
      question: string;
      /**
       * Owners
       * @description People expected to answer (names only)
       */
      owners?: string[];
      /**
       * Due
       * @description Deadline YYYY-MM-DD if any
       */
      due?: string | null;
    };
    /** GeneralSettings */
    GeneralSettings: {
      /**
       * Meeting display name
       * @description Human-readable name shown to other participants when joining or presenting in meetings.
       * @default H3XAssist
       */
      meeting_display_name: string;
      /**
       * Notes owner handle
       * @description Your preferred handle or name used to highlight personal action items in summaries.
       */
      notes_owner_handle?: string | null;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** HttpSettings */
    HttpSettings: {
      /**
       * HTTP host
       * @description Host address to bind the HTTP server to (serves both API and web interface).
       * @default 127.0.0.1
       */
      host: string;
      /**
       * HTTP port
       * @description Port number to bind the HTTP server to (serves both API and web interface).
       * @default 11411
       */
      port: number;
    };
    /** IntegrationsSettings */
    IntegrationsSettings: {
      /**
       * Outlook integration
       * @description Optional configuration for Microsoft Graph/Outlook integration.
       */
      outlook?: components["schemas"]["OutlookSettings"] | null;
      /**
       * Calendar sync interval
       * @description How often to sync with calendar in minutes.
       * @default 5
       */
      calendar_sync_interval_minutes: number;
    };
    /**
     * MeetingSummary
     * @description Structured meeting summary suitable for stakeholders and follow-up actions.
     */
    MeetingSummary: {
      /**
       * Title
       * @description Short descriptive meeting title (<= 120 chars).
       */
      title: string;
      /**
       * Summary Short
       * @description Concise narrative summary in 5-7 sentences (plain text, no markdown).
       */
      summary_short: string;
      /**
       * Key Points
       * @description Concise bullet-level highlights. Prefer 5-10 items.
       */
      key_points: string[];
      /** @description Meeting context: goal and current status. */
      context?: components["schemas"]["ContextSchema"];
      /**
       * Decisions
       * @description Decisions made with status, owners and effective date.
       */
      decisions?: components["schemas"]["DecisionItemSchema"][];
      /**
       * Action Items
       * @description Concrete action items with owners and optional due dates.
       */
      action_items?: components["schemas"]["ActionItemSchema"][];
      /**
       * Risks
       * @description Risks or blockers with likelihood/impact and mitigation details.
       */
      risks?: components["schemas"]["RiskItemSchema"][];
      /**
       * Followups
       * @description Open questions with owners and deadlines.
       */
      followups?: components["schemas"]["FollowupItemSchema"][];
      /**
       * Metrics
       * @description Metrics or results captured during the meeting.
       */
      metrics?: components["schemas"]["MetricItemSchema"][];
      /** @description Plan for the next meeting and preparation. */
      next_steps?: components["schemas"]["NextStepsSchema"];
      /**
       * My Actions
       * @description Action items specifically assigned to the configured notes owner.
       */
      my_actions?: components["schemas"]["ActionItemSchema"][];
    };
    /**
     * MessageResponse
     * @description Standard message response.
     */
    MessageResponse: {
      /**
       * Message
       * @description Response message
       */
      message: string;
    };
    /** MetricItemSchema */
    MetricItemSchema: {
      /**
       * Name
       * @description KPI or metric name
       */
      name: string;
      /**
       * Current Value
       * @description Current value/measurement
       */
      current_value: string;
      /**
       * Target Or Next
       * @description Target or next step for the metric
       */
      target_or_next?: string | null;
    };
    /** ModelsSettings */
    ModelsSettings: {
      /**
       * ASR model name
       * @description Identifier of the WhisperX model used for transcription.
       * @default large-v3
       */
      whisperx_model_name: string;
      /**
       * Default ASR language
       * @description Default language code for ASR transcription (e.g. 'uk', 'en', 'de'). If None, WhisperX will auto-detect the language.
       */
      default_language?: string | null;
      /**
       * Models cache directory
       * @description Local directory where downloaded models and assets are cached.
       * @default ~/.local/share/h3xassist/models
       */
      cache_dir: string;
      /**
       * Hugging Face token
       * @description Optional access token used for diarization backends or gated models.
       */
      hf_token?: string | null;
      /**
       * Device
       * @description Device to use for WhisperX model. If None, WhisperX will use the default device.
       */
      device?: string | null;
      /**
       * Compute type
       * @description Compute type to use for WhisperX model. float16 or int8
       * @default float16
       */
      compute_type: string;
      /**
       * Batch size
       * @description Batch size to use for WhisperX model.
       * @default 16
       */
      batch_size: number;
    };
    /** NextStepsSchema */
    NextStepsSchema: {
      /**
       * Date Window
       * @description Planned date or window for next meeting
       */
      date_window?: string | null;
      /**
       * Agenda Owners
       * @description Agenda owners (names only)
       */
      agenda_owners?: string[];
      /**
       * Prepare
       * @description Preparation items
       */
      prepare?: string[];
    };
    /** OpusSettings */
    OpusSettings: {
      /**
       * Opus target bitrate
       * @description Target bitrate for Opus encoder, expressed as a string (e.g. '24k').
       * @default 24k
       */
      bitrate: string;
      /**
       * Opus container format
       * @description Container format for Opus output (e.g. 'ogg').
       * @default ogg
       */
      container: string;
    };
    /** OutlookSettings */
    OutlookSettings: {
      /**
       * Azure AD tenant ID
       * @description Azure Active Directory tenant (directory) identifier used for Microsoft Graph OAuth.
       */
      tenant_id: string;
      /**
       * Application (client) ID
       * @description Client ID of the Azure AD application registration for Microsoft Graph.
       */
      client_id: string;
      /**
       * User email
       * @description Primary mailbox email used to access Outlook and Calendar resources.
       */
      user_email: string;
      /**
       * MSAL token cache path
       * @description Filesystem path where MSAL stores OAuth tokens for reuse.
       * @default /var/home/h3xcode/.config/h3xassist/msal_cache.json
       */
      token_cache_path: string;
    };
    /** PathsSettings */
    PathsSettings: {
      /**
       * Base directory
       * @description Root directory used to store meeting recordings and derived artifacts.
       * @default ~/.local/share/h3xassist
       */
      base_dir: string;
    };
    /** PostprocessSettings */
    PostprocessSettings: {
      /**
       * Post-process concurrency
       * @description Maximum number of post-processing jobs that may run concurrently.
       * @default 1
       */
      concurrency: number;
    };
    /**
     * ProfileConfig
     * @description Browser profile configuration.
     */
    ProfileConfig: {
      /**
       * Name
       * @description Profile name
       */
      name: string;
      /**
       * Path
       * @description Profile directory path
       */
      path: string;
    };
    /**
     * RecordingMeta
     * @description Unified recording metadata - combines Event + Recording data.
     */
    RecordingMeta: {
      /**
       * Id
       * Format: uuid
       * @description Recording ID
       */
      id: string;
      /**
       * Subject
       * @description Meeting subject
       */
      subject: string;
      /**
       * Url
       * @description Meeting URL
       */
      url: string;
      /**
       * Scheduled Start
       * Format: date-time
       * @description Meeting scheduled start time
       */
      scheduled_start: string;
      /**
       * Scheduled End
       * Format: date-time
       * @description Meeting scheduled end time
       */
      scheduled_end: string;
      /**
       * Source
       * @description Meeting source
       * @default manual
       */
      source: string;
      /**
       * External Id
       * @description Meeting external ID
       */
      external_id?: string | null;
      /**
       * Actual Start
       * @description Meeting actual start time
       */
      actual_start?: string | null;
      /**
       * Actual End
       * @description Meeting actual end time
       */
      actual_end?: string | null;
      /**
       * Duration Sec
       * @description Meeting duration
       */
      duration_sec?: number | null;
      /**
       * Bytes Written
       * @description Meeting bytes written
       */
      bytes_written?: number | null;
      /**
       * End Reason
       * @description Meeting end reason
       */
      end_reason?: string | null;
      /**
       * Postprocess Stage
       * @description Postprocess stage
       */
      postprocess_stage?: string | null;
      /**
       * @description Meeting status
       * @default scheduled
       */
      status: components["schemas"]["RecordingStatus"];
      /**
       * Language
       * @description Meeting language
       */
      language?: string | null;
      /**
       * Profile
       * @description Meeting profile
       * @default default
       */
      profile: string;
      /**
       * Use School Meet
       * @description Use school Google Meet mode
       * @default false
       */
      use_school_meet: boolean;
      /**
       * Error Message
       * @description Meeting error message
       */
      error_message?: string | null;
    };
    /** RecordingSettings */
    RecordingSettings: {
      /**
       * Recording metrics enabled
       * @description Whether to collect and emit recording/encoder metrics periodically.
       * @default false
       */
      metrics_enabled: boolean;
      /**
       * Metrics interval (sec)
       * @description Interval in seconds for metrics collection when metrics are enabled.
       * @default 5
       */
      metrics_interval_sec: number;
      /**
       * Drain timeout (sec)
       * @description Additional time in seconds to flush encoders and buffers after stream end.
       * @default 5
       */
      drain_sec: number;
    };
    /**
     * RecordingStatus
     * @enum {string}
     */
    RecordingStatus:
      | "scheduled"
      | "recording"
      | "processing"
      | "ready"
      | "completed"
      | "error"
      | "cancelled"
      | "skipped";
    /**
     * ReprocessRequest
     * @description Request to reprocess a recording with different language settings.
     */
    ReprocessRequest: {
      /**
       * Language
       * @description Language code for transcription (e.g., 'en', 'uk', 'es')
       */
      language: string;
    };
    /** RiskItemSchema */
    RiskItemSchema: {
      /**
       * Description
       * @description Risk or blocker description
       */
      description: string;
      /**
       * Likelihood
       * @description low/medium/high or percentage
       */
      likelihood?: string | null;
      /**
       * Impact
       * @description low/medium/high
       */
      impact?: string | null;
      /**
       * Mitigation Owners
       * @description Mitigation owners (names only)
       */
      mitigation_owners?: string[];
      /**
       * Mitigation Step
       * @description Next mitigation step
       */
      mitigation_step?: string | null;
    };
    /** SpeakerAssignSettings */
    SpeakerAssignSettings: {
      /**
       * Anchor mapping enabled
       * @description Enable refinement of diarization via anchor segments.
       * @default false
       */
      enabled: boolean;
      /**
       * Minimum anchor segment length (sec)
       * @description Anchors shorter than this many seconds are discarded.
       * @default 2.5
       */
      min_seg_sec: number;
      /**
       * Minimum anchor overlap ratio
       * @description Minimum overlap ratio required for an anchor to be considered valid.
       * @default 0.75
       */
      min_overlap_ratio: number;
      /**
       * Enforce one-to-one mapping
       * @description If true, enforces a strict one-to-one anchor-to-speaker relation.
       * @default true
       */
      one_to_one: boolean;
      /**
       * Minimum ratio
       * @description Minimum ratio required for an anchor to be considered valid.
       * @default 0.5
       */
      min_ratio: number;
    };
    /** SummarizationSettings */
    SummarizationSettings: {
      /**
       * Summarization enabled
       * @description Whether to run summarization automatically after processing.
       * @default true
       */
      enabled: boolean;
      /**
       * Google API key
       * @description Google API key used by the Generative AI client.
       */
      provider_token?: string | null;
      /**
       * LLM model name
       * @description Model name used by the Google Generative AI client.
       * @default gemini-2.5-flash
       */
      model_name: string;
      /**
       * Summary language
       * @description Language code for generated summary (e.g. 'uk', 'en', 'de'). If None, summary will be in the same language as transcript.
       */
      summary_language?: string | null;
      /**
       * Sampling temperature
       * @description Controls randomness of generation; higher values increase creativity.
       * @default 0.2
       */
      temperature: number;
      /**
       * Max input characters
       * @description Maximum number of input characters to feed into the summarization model.
       * @default 120000
       */
      max_chars: number;
      /**
       * Retry max attempts
       * @description Maximum number of attempts (initial try + retries) for provider calls.
       * @default 5
       */
      retry_max_attempts: number;
      /**
       * Retry initial delay (sec)
       * @description Initial delay before the first retry attempt (seconds).
       * @default 1
       */
      retry_initial_delay_sec: number;
      /**
       * Retry backoff multiplier
       * @description Exponential backoff multiplier applied to the retry delay.
       * @default 2
       */
      retry_backoff_multiplier: number;
      /**
       * Retry max delay (sec)
       * @description Upper bound for the backoff delay between retries (seconds).
       * @default 20
       */
      retry_max_delay_sec: number;
      /**
       * Retry jitter (sec)
       * @description Random jitter added to backoff delay to avoid thundering herd (seconds).
       * @default 0.5
       */
      retry_jitter_sec: number;
      /**
       * Retryable status codes
       * @description HTTP status codes considered retryable for provider calls.
       */
      retry_status_codes?: number[];
    };
    /** Transcript */
    Transcript: {
      /** Segments */
      segments?: components["schemas"]["TranscriptSegment"][];
    };
    /** TranscriptSegment */
    TranscriptSegment: {
      /** Speaker */
      speaker: string;
      /** Start */
      start: number;
      /** End */
      end: number;
      /** Text */
      text?: string | null;
      /** Speaker Confidence */
      speaker_confidence?: number | null;
    };
    /** UpdateProfileRequest */
    UpdateProfileRequest: {
      /**
       * Name
       * @description New profile name
       */
      name: string;
    };
    /** UpdateRecordingRequest */
    UpdateRecordingRequest: {
      /**
       * Subject
       * @description Meeting subject
       */
      subject?: string | null;
      /**
       * Language
       * @description Meeting language
       */
      language?: string | null;
      /**
       * Profile
       * @description Browser profile
       */
      profile?: string | null;
      /**
       * Use School Meet
       * @description Use school Google Meet mode
       */
      use_school_meet?: boolean | null;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  list_recordings_api_v1_recordings_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RecordingMeta"][];
        };
      };
    };
  };
  create_recording_api_v1_recordings_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateRecordingRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RecordingMeta"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_recording_api_v1_recordings__recording_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recording_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RecordingMeta"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  update_recording_api_v1_recordings__recording_id__put: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recording_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateRecordingRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RecordingMeta"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_recording_api_v1_recordings__recording_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recording_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  start_recording_api_v1_recordings__recording_id__start_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recording_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  stop_recording_api_v1_recordings__recording_id__stop_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recording_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_recording_audio_api_v1_recordings__recording_id__audio_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recording_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_recording_transcript_api_v1_recordings__recording_id__transcript_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recording_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Transcript"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_recording_summary_api_v1_recordings__recording_id__summary_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recording_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MeetingSummary"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  postprocess_recording_api_v1_recordings__recording_id__postprocess_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recording_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  reprocess_recording_api_v1_recordings__recording_id__reprocess_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recording_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReprocessRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  list_profiles_api_v1_profiles_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProfileConfig"][];
        };
      };
    };
  };
  create_profile_api_v1_profiles_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateProfileRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProfileConfig"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_profile_api_v1_profiles__profile_name__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        profile_name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProfileConfig"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  update_profile_api_v1_profiles__profile_name__put: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        profile_name: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProfileRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProfileConfig"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_profile_api_v1_profiles__profile_name__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        profile_name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  launch_profile_api_v1_profiles__profile_name__launch_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        profile_name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  sync_calendar_api_v1_calendar_sync_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
    };
  };
  get_settings_schema_api_v1_settings_schema_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
    };
  };
  get_settings_api_v1_settings_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AppSettings-Output"];
        };
      };
    };
  };
  update_settings_api_v1_settings_put: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AppSettings-Input"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  restart_service_api_v1_service_restart_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            [key: string]: string | number;
          };
        };
      };
    };
  };
  service_status_api_v1_service_status_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            [key: string]: string | number;
          };
        };
      };
    };
  };
  health_check_health_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            [key: string]: string;
          };
        };
      };
    };
  };
}
